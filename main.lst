CCS PCM C Compiler, Version 5.025, 5967               12-Oct-17 00:26

               Filename:   C:\Users\Dung Phan\Documents\ITR\CCSC\main.lst

               ROM used:   403 words (5%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           31 (8%) worst case
               Stack used: 2 locations (0 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   171
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   043
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
002F:  MOVLW  36
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   042
0035:  MOVLW  06
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  7B
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 00,F
0041:  GOTO   035
0042:  RETURN
....................  
....................  
....................  
.................... #define BUT_1   input(PIN_B4) 
.................... #define BUT_2   input(PIN_B5) 
.................... #define BUT_3   input(PIN_B6) 
.................... #define BUT_4   input(PIN_B7) 
.................... int8 Q[]={0x7E,0xBD,0xDB,0xE7}; 
*
0180:  MOVLW  7E
0181:  BCF    03.5
0182:  MOVWF  27
0183:  MOVLW  BD
0184:  MOVWF  28
0185:  MOVLW  DB
0186:  MOVWF  29
0187:  MOVLW  E7
0188:  MOVWF  2A
.................... int a=0,b=0,c=0,d=0; 
.................... #INT_RB 
.................... void interrupt() 
.................... { 
....................    if(BUT_1==0) 
*
0043:  BSF    03.5
0044:  BSF    06.4
0045:  BCF    03.5
0046:  BTFSC  06.4
0047:  GOTO   088
....................    { 
....................       a=1; 
0048:  MOVLW  01
0049:  MOVWF  2B
....................       while(BUT_1==0) 
004A:  BSF    03.5
004B:  BSF    06.4
004C:  BCF    03.5
004D:  BTFSC  06.4
004E:  GOTO   053
....................          {delay_ms(1);} 
004F:  MOVLW  01
0050:  MOVWF  36
0051:  CALL   02F
0052:  GOTO   04A
....................       while(a==1) 
0053:  DECFSZ 2B,W
0054:  GOTO   088
....................       { 
....................       int8 i,m = 0b11111110; 
0055:  MOVLW  FE
0056:  MOVWF  30
....................          for(i=0;i<8;i++) 
0057:  CLRF   2F
0058:  MOVF   2F,W
0059:  SUBLW  07
005A:  BTFSS  03.0
005B:  GOTO   087
....................          { 
....................             output_d(m); 
005C:  BSF    03.5
005D:  CLRF   08
005E:  BCF    03.5
005F:  MOVF   30,W
0060:  MOVWF  08
....................             if(BUT_1==0||BUT_2==0||BUT_3==0||BUT_4==0) 
0061:  BSF    03.5
0062:  BSF    06.4
0063:  BCF    03.5
0064:  BTFSS  06.4
0065:  GOTO   075
0066:  BSF    03.5
0067:  BSF    06.5
0068:  BCF    03.5
0069:  BTFSS  06.5
006A:  GOTO   075
006B:  BSF    03.5
006C:  BSF    06.6
006D:  BCF    03.5
006E:  BTFSS  06.6
006F:  GOTO   075
0070:  BSF    03.5
0071:  BSF    06.7
0072:  BCF    03.5
0073:  BTFSC  06.7
0074:  GOTO   080
....................             { 
....................                a=0; 
0075:  CLRF   2B
....................                break; 
0076:  GOTO   087
....................                while(BUT_1==0) 
0077:  BSF    03.5
0078:  BSF    06.4
0079:  BCF    03.5
007A:  BTFSC  06.4
007B:  GOTO   080
....................          {delay_ms(1);} 
007C:  MOVLW  01
007D:  MOVWF  36
007E:  CALL   02F
007F:  GOTO   077
....................             } 
....................             delay_ms(100); 
0080:  MOVLW  64
0081:  MOVWF  36
0082:  CALL   02F
....................             m=m<<1; 
0083:  BCF    03.0
0084:  RLF    30,F
0085:  INCF   2F,F
0086:  GOTO   058
....................          } 
0087:  GOTO   053
....................       } 
....................    } 
....................    if(BUT_2==0) 
0088:  BSF    03.5
0089:  BSF    06.5
008A:  BCF    03.5
008B:  BTFSC  06.5
008C:  GOTO   0CD
....................    { 
....................       b=1; 
008D:  MOVLW  01
008E:  MOVWF  2C
....................       while(BUT_2==0) 
008F:  BSF    03.5
0090:  BSF    06.5
0091:  BCF    03.5
0092:  BTFSC  06.5
0093:  GOTO   098
....................          {delay_ms(1);} 
0094:  MOVLW  01
0095:  MOVWF  36
0096:  CALL   02F
0097:  GOTO   08F
....................       while(b==1) 
0098:  DECFSZ 2C,W
0099:  GOTO   0CD
....................       { 
....................       int8 i,m = 0b01111111; 
009A:  MOVLW  7F
009B:  MOVWF  32
....................          for(i=0;i<8;i++) 
009C:  CLRF   31
009D:  MOVF   31,W
009E:  SUBLW  07
009F:  BTFSS  03.0
00A0:  GOTO   0CC
....................          { 
....................             output_d(m); 
00A1:  BSF    03.5
00A2:  CLRF   08
00A3:  BCF    03.5
00A4:  MOVF   32,W
00A5:  MOVWF  08
....................             if(BUT_1==0||BUT_2==0||BUT_3==0||BUT_4==0) 
00A6:  BSF    03.5
00A7:  BSF    06.4
00A8:  BCF    03.5
00A9:  BTFSS  06.4
00AA:  GOTO   0BA
00AB:  BSF    03.5
00AC:  BSF    06.5
00AD:  BCF    03.5
00AE:  BTFSS  06.5
00AF:  GOTO   0BA
00B0:  BSF    03.5
00B1:  BSF    06.6
00B2:  BCF    03.5
00B3:  BTFSS  06.6
00B4:  GOTO   0BA
00B5:  BSF    03.5
00B6:  BSF    06.7
00B7:  BCF    03.5
00B8:  BTFSC  06.7
00B9:  GOTO   0C5
....................             { 
....................                b=0; 
00BA:  CLRF   2C
....................                break; 
00BB:  GOTO   0CC
....................                while(BUT_2==0) 
00BC:  BSF    03.5
00BD:  BSF    06.5
00BE:  BCF    03.5
00BF:  BTFSC  06.5
00C0:  GOTO   0C5
....................          {delay_ms(1);} 
00C1:  MOVLW  01
00C2:  MOVWF  36
00C3:  CALL   02F
00C4:  GOTO   0BC
....................             } 
....................             delay_ms(100); 
00C5:  MOVLW  64
00C6:  MOVWF  36
00C7:  CALL   02F
....................             m=m>>1; 
00C8:  BCF    03.0
00C9:  RRF    32,F
00CA:  INCF   31,F
00CB:  GOTO   09D
....................          } 
00CC:  GOTO   098
....................       } 
....................    } 
....................    if(BUT_3==0) 
00CD:  BSF    03.5
00CE:  BSF    06.6
00CF:  BCF    03.5
00D0:  BTFSC  06.6
00D1:  GOTO   12F
....................    { 
....................       c=1; 
00D2:  MOVLW  01
00D3:  MOVWF  2D
....................       while(BUT_3==0) 
00D4:  BSF    03.5
00D5:  BSF    06.6
00D6:  BCF    03.5
00D7:  BTFSC  06.6
00D8:  GOTO   0DD
....................          {delay_ms(1);} 
00D9:  MOVLW  01
00DA:  MOVWF  36
00DB:  CALL   02F
00DC:  GOTO   0D4
....................       while(c==1) 
00DD:  DECFSZ 2D,W
00DE:  GOTO   12F
....................       { 
....................       int8 i,m = 0b00000000; 
00DF:  CLRF   34
....................             output_d(m); 
00E0:  BSF    03.5
00E1:  CLRF   08
00E2:  BCF    03.5
00E3:  MOVF   34,W
00E4:  MOVWF  08
....................             if(BUT_1==0||BUT_2==0||BUT_3==0||BUT_4==0) 
00E5:  BSF    03.5
00E6:  BSF    06.4
00E7:  BCF    03.5
00E8:  BTFSS  06.4
00E9:  GOTO   0F9
00EA:  BSF    03.5
00EB:  BSF    06.5
00EC:  BCF    03.5
00ED:  BTFSS  06.5
00EE:  GOTO   0F9
00EF:  BSF    03.5
00F0:  BSF    06.6
00F1:  BCF    03.5
00F2:  BTFSS  06.6
00F3:  GOTO   0F9
00F4:  BSF    03.5
00F5:  BSF    06.7
00F6:  BCF    03.5
00F7:  BTFSC  06.7
00F8:  GOTO   104
....................             { 
....................                c=0; 
00F9:  CLRF   2D
....................                break; 
00FA:  GOTO   12F
....................                while(BUT_3==0) 
00FB:  BSF    03.5
00FC:  BSF    06.6
00FD:  BCF    03.5
00FE:  BTFSC  06.6
00FF:  GOTO   104
....................          {delay_ms(1);} 
0100:  MOVLW  01
0101:  MOVWF  36
0102:  CALL   02F
0103:  GOTO   0FB
....................             } 
....................             delay_ms(100); 
0104:  MOVLW  64
0105:  MOVWF  36
0106:  CALL   02F
....................             output_d(0xFF); 
0107:  BSF    03.5
0108:  CLRF   08
0109:  MOVLW  FF
010A:  BCF    03.5
010B:  MOVWF  08
....................             if(BUT_1==0||BUT_2==0||BUT_3==0||BUT_4==0) 
010C:  BSF    03.5
010D:  BSF    06.4
010E:  BCF    03.5
010F:  BTFSS  06.4
0110:  GOTO   120
0111:  BSF    03.5
0112:  BSF    06.5
0113:  BCF    03.5
0114:  BTFSS  06.5
0115:  GOTO   120
0116:  BSF    03.5
0117:  BSF    06.6
0118:  BCF    03.5
0119:  BTFSS  06.6
011A:  GOTO   120
011B:  BSF    03.5
011C:  BSF    06.7
011D:  BCF    03.5
011E:  BTFSC  06.7
011F:  GOTO   12B
....................             { 
....................                c=0; 
0120:  CLRF   2D
....................                break; 
0121:  GOTO   12F
....................                while(BUT_3==0) 
0122:  BSF    03.5
0123:  BSF    06.6
0124:  BCF    03.5
0125:  BTFSC  06.6
0126:  GOTO   12B
....................          {delay_ms(1);} 
0127:  MOVLW  01
0128:  MOVWF  36
0129:  CALL   02F
012A:  GOTO   122
....................             } 
....................             delay_ms(100); 
012B:  MOVLW  64
012C:  MOVWF  36
012D:  CALL   02F
012E:  GOTO   0DD
....................       } 
....................    } 
....................    if(BUT_4==0) 
012F:  BSF    03.5
0130:  BSF    06.7
0131:  BCF    03.5
0132:  BTFSC  06.7
0133:  GOTO   16D
.................... { 
....................       d=1; 
0134:  MOVLW  01
0135:  MOVWF  2E
....................       while(BUT_4==0) 
0136:  BSF    03.5
0137:  BSF    06.7
0138:  BCF    03.5
0139:  BTFSC  06.7
013A:  GOTO   13F
....................          {delay_ms(1);} 
013B:  MOVLW  01
013C:  MOVWF  36
013D:  CALL   02F
013E:  GOTO   136
....................       while(d==1) 
013F:  DECFSZ 2E,W
0140:  GOTO   16D
....................       { 
....................          int i; 
....................          for(i=0;i<4;i++) 
0141:  CLRF   35
0142:  MOVF   35,W
0143:  SUBLW  03
0144:  BTFSS  03.0
0145:  GOTO   16C
....................          { 
....................             output_d(Q[i]); 
0146:  MOVLW  27
0147:  ADDWF  35,W
0148:  MOVWF  04
0149:  BCF    03.7
014A:  MOVF   00,W
014B:  MOVWF  36
014C:  BSF    03.5
014D:  CLRF   08
014E:  BCF    03.5
014F:  MOVF   36,W
0150:  MOVWF  08
....................             if(BUT_1==0||BUT_2==0||BUT_3==0||BUT_4==0) 
0151:  BSF    03.5
0152:  BSF    06.4
0153:  BCF    03.5
0154:  BTFSS  06.4
0155:  GOTO   165
0156:  BSF    03.5
0157:  BSF    06.5
0158:  BCF    03.5
0159:  BTFSS  06.5
015A:  GOTO   165
015B:  BSF    03.5
015C:  BSF    06.6
015D:  BCF    03.5
015E:  BTFSS  06.6
015F:  GOTO   165
0160:  BSF    03.5
0161:  BSF    06.7
0162:  BCF    03.5
0163:  BTFSC  06.7
0164:  GOTO   167
....................             { 
....................                d=0; 
0165:  CLRF   2E
....................                break; 
0166:  GOTO   16C
....................             } 
....................             delay_ms(100); 
0167:  MOVLW  64
0168:  MOVWF  36
0169:  CALL   02F
016A:  INCF   35,F
016B:  GOTO   142
....................          } 
016C:  GOTO   13F
....................       } 
....................    } 
016D:  BCF    0B.0
016E:  BCF    0A.3
016F:  BCF    0A.4
0170:  GOTO   01B
.................... } 
....................  
.................... void main() 
0171:  MOVF   03,W
0172:  ANDLW  1F
0173:  MOVWF  03
0174:  CLRF   2B
0175:  CLRF   2C
0176:  CLRF   2D
0177:  CLRF   2E
0178:  BSF    03.5
0179:  BSF    1F.0
017A:  BSF    1F.1
017B:  BSF    1F.2
017C:  BCF    1F.3
017D:  MOVLW  07
017E:  MOVWF  1C
017F:  BCF    03.7
.................... { 
....................    output_d(0xFF); 
*
0189:  BSF    03.5
018A:  CLRF   08
018B:  MOVLW  FF
018C:  BCF    03.5
018D:  MOVWF  08
....................    clear_interrupt(INT_RB); 
018E:  BCF    0B.0
....................    enable_interrupts(INT_RB); 
018F:  BSF    0B.3
....................    enable_interrupts(GLOBAL);   
0190:  MOVLW  C0
0191:  IORWF  0B,F
.................... } 
0192:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
